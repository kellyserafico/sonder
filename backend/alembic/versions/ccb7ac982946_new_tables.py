"""new tables

Revision ID: ccb7ac982946
Revises: 1023980ebda0
Create Date: 2025-04-26 07:20:44.531068

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'ccb7ac982946'
down_revision: Union[str, None] = '1023980ebda0'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # Import necessary modules
    from sqlalchemy import inspect
    
    # Get connection and create inspector
    conn = op.get_bind()
    inspector = inspect(conn)
    existing_tables = inspector.get_table_names()
    
    # Create prompts table if it doesn't exist
    if 'prompts' not in existing_tables:
        op.create_table('prompts',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('content', sa.Text(), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('scheduled_for', sa.DateTime(timezone=True), nullable=True),
        sa.Column('is_active', sa.Boolean(), nullable=True),
        sa.PrimaryKeyConstraint('id')
        )
        op.create_index(op.f('ix_prompts_id'), 'prompts', ['id'], unique=False)
    
    # Create comments table if it doesn't exist
    if 'comments' not in existing_tables:
        op.create_table('comments',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('content', sa.Text(), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('response_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['response_id'], ['responses.id'], ),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id')
        )
        op.create_index(op.f('ix_comments_id'), 'comments', ['id'], unique=False)
    
    # Create notifications table if it doesn't exist
    if 'notifications' not in existing_tables:
        op.create_table('notifications',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('type', sa.String(length=50), nullable=False),
        sa.Column('content', sa.Text(), nullable=True),
        sa.Column('is_read', sa.Boolean(), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('prompt_id', sa.Integer(), nullable=True),
        sa.Column('response_id', sa.Integer(), nullable=True),
        sa.Column('comment_id', sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(['comment_id'], ['comments.id'], ),
        sa.ForeignKeyConstraint(['prompt_id'], ['prompts.id'], ),
        sa.ForeignKeyConstraint(['response_id'], ['responses.id'], ),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id')
        )
        op.create_index(op.f('ix_notifications_id'), 'notifications', ['id'], unique=False)
    
    # Check if responses table exists
    if 'responses' in existing_tables:
        # Check if prompt_id column exists in responses table
        columns = [col['name'] for col in inspector.get_columns('responses')]
        if 'prompt_id' not in columns:
            # Add prompt_id column to responses table
            try:
                op.add_column('responses', sa.Column('prompt_id', sa.Integer(), nullable=True))
                # Make it non-nullable later after data migration if needed
                op.create_foreign_key(None, 'responses', 'prompts', ['prompt_id'], ['id'])
            except Exception as e:
                print(f"Error adding prompt_id column: {e}")
    else:
        # Create responses table if it doesn't exist (though it likely does based on your error)
        op.create_table('responses',
        # Add your responses table structure here
        )


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'responses', type_='foreignkey')
    op.drop_column('responses', 'prompt_id')
    op.drop_index(op.f('ix_notifications_id'), table_name='notifications')
    op.drop_table('notifications')
    op.drop_index(op.f('ix_comments_id'), table_name='comments')
    op.drop_table('comments')
    op.drop_index(op.f('ix_prompts_id'), table_name='prompts')
    op.drop_table('prompts')
    # ### end Alembic commands ###
